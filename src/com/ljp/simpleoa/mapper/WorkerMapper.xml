<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ljp.simpleoa.mapper.WorkerMapper">
  <resultMap id="BaseResultMap" type="com.ljp.simpleoa.model.Worker">
    <id column="worker_id" jdbcType="INTEGER" property="workerId" />
    <result column="worker_sn" jdbcType="VARCHAR" property="workerSn" />
    <result column="worker_pw" jdbcType="VARCHAR" property="workerPw" />
    <result column="worker_name" jdbcType="VARCHAR" property="workerName" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
    <result column="post" jdbcType="VARCHAR" property="post" />
    <!-- <association property="" fetchType="lazy"></association> -->
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    worker_id, worker_sn, worker_pw, worker_name, department_id, post
  </sql>
  <select id="selectByExample" parameterType="com.ljp.simpleoa.model.WorkerExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from worker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from worker
    where worker_id = #{workerId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from worker
    where worker_id = #{workerId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.ljp.simpleoa.model.WorkerExample">
    delete from worker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ljp.simpleoa.model.Worker">
    insert into worker (worker_id, worker_sn, worker_pw, 
      worker_name, department_id, post
      )
    values (#{workerId,jdbcType=INTEGER}, #{workerSn,jdbcType=VARCHAR}, #{workerPw,jdbcType=VARCHAR}, 
      #{workerName,jdbcType=VARCHAR}, #{departmentId,jdbcType=INTEGER}, #{post,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.ljp.simpleoa.model.Worker">
    insert into worker
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="workerId != null">
        worker_id,
      </if>
      <if test="workerSn != null">
        worker_sn,
      </if>
      <if test="workerPw != null">
        worker_pw,
      </if>
      <if test="workerName != null">
        worker_name,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
      <if test="post != null">
        post,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="workerId != null">
        #{workerId,jdbcType=INTEGER},
      </if>
      <if test="workerSn != null">
        #{workerSn,jdbcType=VARCHAR},
      </if>
      <if test="workerPw != null">
        #{workerPw,jdbcType=VARCHAR},
      </if>
      <if test="workerName != null">
        #{workerName,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="post != null">
        #{post,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ljp.simpleoa.model.WorkerExample" resultType="java.lang.Long">
    select count(*) from worker
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update worker
    <set>
      <if test="record.workerId != null">
        worker_id = #{record.workerId,jdbcType=INTEGER},
      </if>
      <if test="record.workerSn != null">
        worker_sn = #{record.workerSn,jdbcType=VARCHAR},
      </if>
      <if test="record.workerPw != null">
        worker_pw = #{record.workerPw,jdbcType=VARCHAR},
      </if>
      <if test="record.workerName != null">
        worker_name = #{record.workerName,jdbcType=VARCHAR},
      </if>
      <if test="record.departmentId != null">
        department_id = #{record.departmentId,jdbcType=INTEGER},
      </if>
      <if test="record.post != null">
        post = #{record.post,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update worker
    set worker_id = #{record.workerId,jdbcType=INTEGER},
      worker_sn = #{record.workerSn,jdbcType=VARCHAR},
      worker_pw = #{record.workerPw,jdbcType=VARCHAR},
      worker_name = #{record.workerName,jdbcType=VARCHAR},
      department_id = #{record.departmentId,jdbcType=INTEGER},
      post = #{record.post,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ljp.simpleoa.model.Worker">
    update worker
    <set>
      <if test="workerSn != null">
        worker_sn = #{workerSn,jdbcType=VARCHAR},
      </if>
      <if test="workerPw != null">
        worker_pw = #{workerPw,jdbcType=VARCHAR},
      </if>
      <if test="workerName != null">
        worker_name = #{workerName,jdbcType=VARCHAR},
      </if>
      <if test="departmentId != null">
        department_id = #{departmentId,jdbcType=INTEGER},
      </if>
      <if test="post != null">
        post = #{post,jdbcType=VARCHAR},
      </if>
    </set>
    where worker_id = #{workerId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ljp.simpleoa.model.Worker">
    update worker
    set worker_sn = #{workerSn,jdbcType=VARCHAR},
      worker_pw = #{workerPw,jdbcType=VARCHAR},
      worker_name = #{workerName,jdbcType=VARCHAR},
      department_id = #{departmentId,jdbcType=INTEGER},
      post = #{post,jdbcType=VARCHAR}
    where worker_id = #{workerId,jdbcType=INTEGER}
  </update>
  
</mapper>